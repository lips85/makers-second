---
alwaysApply: true
description: UUID 사용 가이드라인 - Supabase 프로젝트에서 UUID 처리 방침
---

# UUID 사용 가이드라인

## 🚫 금지사항

### 외부 UUID 패키지 사용 금지
- `uuid`, `@types/uuid` 패키지 설치 및 사용 금지
- `crypto.randomUUID()` 사용 금지 (Node.js 내장 함수라도)
- 클라이언트에서 임의의 UUID 생성 금지

## ✅ 권장사항

### Supabase 기본 제공 기능 활용
```sql
-- 데이터베이스 테이블 정의 시
CREATE TABLE example_table (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  -- 다른 컬럼들...
);
```

### API에서 UUID 처리
```typescript
// ❌ 잘못된 방법
import { v4 as uuidv4 } from 'uuid';
const id = uuidv4();

// ❌ 잘못된 방법
const id = crypto.randomUUID();

// ✅ 올바른 방법 - Supabase가 자동 생성
const { data, error } = await supabase
  .from('table_name')
  .insert({ /* id 없이 다른 필드만 */ })
  .select()
  .single();

// 생성된 UUID는 data.id로 접근
const generatedId = data?.id;
```

### 멱등성이 필요한 경우
```typescript
// 클라이언트에서 고유 식별자가 필요한 경우
// 타임스탬프 + 랜덤 문자열 조합 사용
const clientId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

// 또는 기존 데이터 기반 식별자 사용
const sessionId = `${userId}-${gameMode}-${timestamp}`;
```

## 🎯 적용 범위

### 데이터베이스
- 모든 테이블의 기본 키는 Supabase `gen_random_uuid()` 사용
- 외부 키 참조 시에도 Supabase가 생성한 UUID 사용

### API Routes
- 새로운 레코드 생성 시 UUID 필드 생략
- Supabase INSERT 후 반환된 UUID 사용

### 클라이언트 코드
- 임시 식별자가 필요한 경우만 제한적으로 문자열 조합 사용
- 데이터베이스 저장용 UUID는 절대 클라이언트에서 생성하지 않음

## 📝 예외상황

### 외부 API 연동
- 외부 서비스에서 UUID 형식을 요구하는 경우에만 예외적으로 허용
- 반드시 코멘트로 사용 이유 명시

```typescript
// ✅ 예외적 허용 - 외부 결제 API 요구사항
const paymentRequestId = crypto.randomUUID(); // Stripe API 요구사항
```

## 🔍 체크포인트

개발 시 다음 사항들을 확인:

1. ❓ UUID가 정말 필요한가?
2. ❓ Supabase에서 자동 생성 가능한가?
3. ❓ 외부 패키지 없이 해결 가능한가?
4. ❓ 멱등성을 위한 다른 방법은 없는가?

## 💡 이유

- **일관성**: 모든 UUID가 Supabase에서 생성되어 형식과 품질이 보장됨
- **성능**: 외부 패키지 의존성 제거로 번들 크기 감소
- **보안**: 데이터베이스 수준에서 UUID 생성으로 예측 불가능성 향상
- **유지보수**: UUID 생성 로직이 한 곳에 집중되어 관리 용이

## 🚨 주의사항

- 기존 코드에서 `uuid` 패키지 발견 시 즉시 제거
- `crypto.randomUUID()` 사용 코드 발견 시 Supabase 방식으로 교체
- 새로운 기능 개발 시 UUID 생성 가이드라인 준수 확인