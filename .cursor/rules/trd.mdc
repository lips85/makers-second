---
alwaysApply: true
---

# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **Project Overview**: 본 프로젝트는 Next.js와 Supabase를 활용하여 K-12 학생들을 위한 실시간 영어 단어 스피드 퀴즈 웹 애플리케이션을 개발하는 것을 목표로 합니다. 서버리스 아키텍처를 기반으로 초기 개발 속도를 극대화하고, Vercel을 통해 글로벌 사용자에게 낮은 지연 시간의 서비스를 제공합니다. 핵심 아키텍처는 사용자의 빠른 상호작용과 즉각적인 피드백(실시간 리더보드)에 중점을 둡니다.
- **Core Technology Stack**: 프론트엔드 및 서버 로직은 Next.js 15와 TypeScript로 구현하며, UI는 TailwindCSS와 shadcn/ui를 사용합니다. 백엔드 기능은 Supabase(PostgreSQL, Auth, Realtime)를 BaaS (Backend as a Service) 형태로 활용하여 데이터베이스, 사용자 인증, 실시간 통신을 간소화합니다. 데이터 페칭 및 상태 관리는 @tanstack/react-query를 사용합니다.
- **Key Technical Objectives**:
    - **First Contentful Paint (FCP):** 3초 이내 달성하여 사용자 이탈 방지
    - **API 응답 시간:** P95 기준 200ms 미만 유지 (퀴즈 제출 및 리더보드 조회)
    - **동시 접속자 처리:** MVP 단계에서 최대 1,000명의 동시 퀴즈 진행 사용자 지원
    - **안정성:** 서비스 가용성 99.5% 이상 유지
- **Critical Technical Assumptions**:
    - Supabase의 기본 제공 기능(Auth, Realtime)이 MVP 단계의 사용자 트래픽 및 실시간 요구사항을 충분히 감당할 수 있다고 가정합니다.
    - Vercel의 서버리스 함수 실행 환경이 퀴즈 결과 처리와 같은 핵심 비즈니스 로직을 지연 없이 처리할 수 있다고 가정합니다.
    - 초기 사용자층이 국내에 집중되므로, Vercel의 서울 리전(icn1)을 주 배포 타겟으로 설정합니다.

## 2. Tech Stack

| Category | Technology / Library | Reasoning (Why it's chosen for this project) |
| --- | --- | --- |
| **프레임워크** | `Next.js 15` | 서버 사이드 렌더링(SSR)과 정적 사이트 생성(SSG)을 지원하여 초기 로딩 성능을 최적화하고, API Routes(Route Handlers)를 통해 별도 백엔드 서버 없이 간단한 로직 처리가 가능합니다. |
| **프로그래밍 언어** | `TypeScript` | 정적 타입 검사를 통해 코드의 안정성과 유지보수성을 높이고, 대규모 애플리케이션으로 확장 시 발생할 수 있는 오류를 사전에 방지합니다. |
| **UI 스타일링** | `TailwindCSS` | 유틸리티-우선 접근 방식으로 빠르고 일관된 UI 개발을 지원하며, 프로덕션 빌드 시 불필요한 스타일을 제거(Purge)하여 CSS 파일 크기를 최소화합니다. |
| **UI 컴포넌트** | `shadcn/ui`, `lucide-react` | 재사용 가능하고 접근성이 높은 UI 컴포넌트 라이브러리를 통해 개발 속도를 향상시킵니다. `lucide-react`는 가볍고 일관된 아이콘을 제공합니다. |
| **백엔드 & 데이터베이스** | `Supabase` | PostgreSQL 데이터베이스, 사용자 인증, 실시간 구독 기능을 통합 제공하는 BaaS로, 백엔드 개발 리소스를 최소화하고 MVP를 신속하게 구축하는 데 최적화되어 있습니다. |
| **데이터 페칭 & 상태 관리** | `@tanstack/react-query` | 서버 상태 관리를 간소화하고, 캐싱, 재시도, 백그라운드 업데이트 등의 기능을 통해 데이터 동기화 로직을 효율적으로 처리하며 사용자 경험을 향상시킵니다. |
| **날짜/시간 처리** | `date-fns` | 경량화된 모듈형 날짜 라이브러리로, 필요한 기능만 가져와 사용할 수 있어 번들 크기를 줄이는 데 유리합니다. |
| **배포 및 호스팅** | `Vercel` | Next.js에 최적화된 배포 플랫폼으로, CI/CD 파이프라인 구축이 용이하고 Edge Network를 통해 전 세계 사용자에게 빠른 콘텐츠 전송을 보장합니다. |

## 3. System Architecture Design

### Top-Level building blocks
- **프론트엔드 애플리케이션 (Next.js on Vercel)**
    - 사용자와 직접 상호작용하는 웹 인터페이스를 담당합니다.
    - 하위 구성 요소: UI 컴포넌트(퀴즈 화면, 리더보드), 클라이언트 상태 관리, API 요청 클라이언트.
    - Vercel의 서버리스 함수를 통해 서버 사이드 로직(예: 점수 검증)을 일부 수행합니다.
- **백엔드 서비스 (Supabase)**
    - 데이터 영속성, 사용자 인증, 실시간 통신 등 핵심 백엔드 기능을 제공합니다.
    - 하위 구성 요소: PostgreSQL 데이터베이스(사용자, 퀴즈 결과 등 저장), Supabase Auth(게스트 및 소셜 로그인), Supabase Realtime(리더보드 실시간 업데이트).
- **외부 서비스 (External Services)**
    - 광고, 알림 등 부가적인 기능을 위해 연동되는 서드파티 서비스입니다.
    - 하위 구성 요소: 광고 SDK(Google AdMob/AdSense), 알림 서비스(카카오 알림톡 API 등).

### Top-Level Component Interaction Diagram
```mermaid
graph TD
    subgraph "사용자 디바이스"
        A[웹 브라우저 (Next.js App)]
    end

    subgraph "Vercel Platform"
        B[Next.js 서버 / 서버리스 함수]
    end

    subgraph "Supabase Platform"
        C[Supabase Auth]
        D[PostgreSQL DB]
        E[Realtime Service]
    end

    subgraph "Third-Party Services"
        F[광고 SDK]
        G[알림 서비스]
    end

    A --"HTTP 요청 (SSR/API)"--> B
    B --"DB 쿼리 / 데이터 조작"--> D
    A --"사용자 인증"--> C
    A --"실시간 데이터 구독 (리더보드)"--> E
    D --"DB 변경 이벤트"--> E
    A --"광고 요청"--> F
    B --"주간 리포트 발송 요청"--> G
```
- **사용자 요청 처리**: 사용자의 웹 브라우저는 Vercel에 호스팅된 Next.js 애플리케이션에 접속합니다. 초기 페이지 로드는 서버 사이드 렌더링을 통해 최적화됩니다.
- **데이터 상호작용**: 퀴즈 결과 제출과 같은 데이터 변경 작업은 Next.js의 서버리스 함수를 통해 Supabase PostgreSQL 데이터베이스와 상호작용합니다. 이는 서버 측에서 점수 조작과 같은 부정행위를 방지하는 역할을 합니다.
- **실시간 업데이트**: 사용자는 Supabase의 Realtime Service를 직접 구독하여 리더보드나 교사용 스코어보드의 변경 사항을 즉시 수신합니다. 데이터베이스의 특정 테이블에 변경이 발생하면 Realtime Service가 연결된 클라이언트로 푸시합니다.
- **인증 및 외부 연동**: 사용자 인증은 Supabase Auth를 통해 처리되며, 광고 및 알림 기능은 각각의 서드파티 SDK 및 API와 연동하여 구현됩니다.

### Code Organization & Convention
**Domain-Driven Organization Strategy**
- **도메인 분리**: 비즈니스 도메인(예: 퀴즈, 리더보드, 사용자, 조직)을 기준으로 코드를 구성하여 응집도를 높이고 결합도를 낮춥니다.
- **계층 기반 아키텍처**: 각 도메인 내에서는 표현(presentation), 비즈니스 로직(application), 데이터 접근(data-access) 등 관심사를 계층으로 분리합니다.
- **기능 기반 모듈**: 기술적 관심사(예: `components`, `hooks`)보다는 기능(예: `quiz-runner`, `leaderboard-display`)을 중심으로 모듈을 그룹화합니다.
- **공유 컴포넌트**: 여러 도메인에서 공통으로 사용되는 유틸리티, 타입, UI 컴포넌트 등은 전용 공유 모듈(`shared`)에 위치시킵니다.

**Universal File & Folder Structure**
```
/
├── public/                 # 정적 에셋 (이미지, 폰트 등)
├── src/
│   ├── app/                # Next.js App Router (페이지 및 레이아웃)
│   │   ├── (auth)/         # 인증 관련 페이지 그룹
│   │   ├── (game)/         # 게임 플레이 관련 페이지 그룹
│   │   ├── api/            # API Route Handlers
│   │   └── ...
│   ├── components/         # UI 컴포넌트
│   │   ├── layout/         # 레이아웃 컴포넌트
│   │   └── ui/             # shadcn/ui 기반 원자적 컴포넌트
│   ├── features/           # 도메인별 기능 폴더
│   │   ├── quiz/           # 퀴즈 도메인
│   │   │   ├── components/ # 퀴즈 관련 UI 컴포넌트
│   │   │   ├── hooks/      # 퀴즈 관련 커스텀 훅
│   │   │   └── services/   # 퀴즈 관련 API 요청 로직
│   │   ├── leaderboard/    # 리더보드 도메인
│   │   └── ...
│   ├── lib/                # 서드파티 라이브러리 설정 및 유틸리티
│   │   ├── supabase.ts     # Supabase 클라이언트 설정
│   │   └── utils.ts        # 공통 유틸리티 함수
│   ├── providers/          # 전역 컨텍스트 프로바이더 (e.g., React Query)
│   ├── store/              # 클라이언트 상태 관리 (Zustand 등, 필요 시)
│   └── types/              # 전역 TypeScript 타입 정의
├── tailwind.config.ts      # TailwindCSS 설정
├── tsconfig.json           # TypeScript 설정
└── next.config.mjs         # Next.js 설정
```

### Data Flow & Communication Patterns
- **클라이언트-서버 통신**: 대부분의 데이터 요청 및 변경은 Next.js의 서버 컴포넌트 또는 클라이언트 컴포넌트 내에서 `@tanstack/react-query`를 통해 이루어집니다. 민감한 로직(점수 계산, 부정행위 방지)은 서버리스 함수(Route Handlers)를 통해 처리됩니다.
- **데이터베이스 상호작용**: Supabase의 JavaScript 클라이언트 라이브러리(`@supabase/supabase-js`)를 사용하여 데이터베이스와 상호작용합니다. 서버리스 함수에서는 서비스 키를, 클라이언트에서는 익명 키를 사용하여 RLS(Row Level Security) 정책을 준수합니다.
- **외부 서비스 통합**: 광고 SDK는 클라이언트 사이드에서 비동기적으로 로드하여 초기 렌더링을 방해하지 않도록 합니다. 주간 리포트 발송과 같은 백그라운드 작업은 Supabase의 스케줄된 Edge Function 또는 Vercel Cron Jobs를 활용하여 트리거합니다.
- **실시간 통신**: 교사용 스코어보드와 실시간 리더보드는 Supabase의 Realtime 기능을 사용합니다. 클라이언트는 특정 테이블(예: `rounds`)의 `INSERT` 이벤트를 구독하고, 새 데이터가 발생하면 UI를 즉시 업데이트합니다.
- **데이터 동기화**: `@tanstack/react-query`를 사용하여 서버 상태와 클라이언트 UI 간의 데이터 동기화를 관리합니다. `stale-while-revalidate` 전략을 통해 사용자에게는 항상 최신 데이터를 보여주면서도 불필요한 네트워크 요청을 최소화합니다.

## 4. Performance & Optimization Strategy
- **초기 로딩 속도 최적화**: Next.js의 서버 컴포넌트와 스트리밍을 적극 활용하여 TTV(Time to View)를 단축합니다. 이미지, 폰트 등 주요 에셋은 Next.js의 내장 최적화 기능을 사용하고, Vercel의 CDN을 통해 전송 속도를 높입니다.
- **데이터베이스 성능 확보**: 리더보드 조회와 같이 빈번하게 발생하는 쿼리를 위해 `rounds` 테이블의 `score`, `org_id`, `created_at` 컬럼에 복합 인덱스를 생성합니다. PostgreSQL의 쿼리 분석(`EXPLAIN ANALYZE`)을 통해 병목 구간을 주기적으로 확인하고 최적화합니다.
- **클라이언트 렌더링 최적화**: 게임 플레이 중 발생하는 잦은 리렌더링을 방지하기 위해 `React.memo`를 적절히 사용하고, 상태 관리 범위를 최소화합니다. 불필요한 애니메이션이나 DOM 조작을 줄여 저사양 기기에서도 부드러운 사용자 경험을 제공합니다.
- **번들 사이즈 최소화**: `date-fns`, `lucide-react`와 같이 트리 셰이킹(Tree-shaking)을 잘 지원하는 라이브러리를 사용합니다. Webpack Bundle Analyzer를 통해 정기적으로 번들 구성을 분석하고, 불필요한 의존성을 제거합니다.

## 5. Implementation Roadmap & Milestones
### Phase 1: Foundation (MVP Implementation, 8주)
- **Core Infrastructure (W1-2)**: Supabase 프로젝트 설정(DB 스키마, Auth), Next.js 프로젝트 초기화, Vercel 배포 파이프라인 구축.
- **Essential Features (W1-5)**:
    - (W1-2) 핵심 퀴즈 라운드 플레이 기능, 점수 계산 로직, 기본 글로벌 리더보드 구현. 광고 SDK 초기 연동.
    - (W3) 학교/집단 코드 생성 및 참여 기능, 조직별 리더보드 필터링.
    - (W4) 데일리 챌린지 및 출석 보상 시스템 구현.
    - (W5) 단어장/오답 노트 기능, 리더보드 퍼센타일 표시 기능 추가.
- **Basic Security (지속적)**: Supabase RLS 정책 설정, 서버리스 함수를 통한 점수 검증 로직 구현.
- **Development Setup (W1)**: 개발 환경 구성, GitHub 레포지토리 설정, 기본 CI/CD 연동.
- **Timeline**: 8주 내 베타 공개를 목표로 함. (W6-8: 공유 카드, 교사용 보드, 주간 리포트 등 보조 기능 구현 및 안정화)

### Phase 2: Feature Enhancement
- **Advanced Features**: 친구 추가 및 친구 리더보드, 개인별 학습 통계 대시보드, 다양한 퀴즈 모드 추가.
- **Performance Optimization**: 대규모 트래픽 대응을 위한 데이터베이스 리플리케이션 및 Supabase 인프라 확장 검토. 실시간 통신 부하 분산을 위한 채널 최적화.
- **Enhanced Security**: 부정행위 패턴 탐지 자동화 로직 고도화, 민감 정보에 대한 추가적인 암호화 정책 적용.
- **Monitoring Implementation**: Vercel Analytics 및 외부 모니터링 툴(Sentry 등)을 연동하여 에러 트래킹 및 성능 모니터링 시스템 구축.
- **Timeline**: MVP 출시 후 3~6개월.

## 6. Risk Assessment & Mitigation Strategies
### Technical Risk Analysis
- **Technology Risks**:
    - **위험**: Supabase Realtime 서비스가 특정 시간대(수업 시작 전)에 집중되는 트래픽을 감당하지 못할 가능성.
    - **완화 전략**: 부하 테스트를 통해 임계점을 파악하고, 필요 시 Supabase 유료 플랜으로 업그레이드합니다. 리더보드 업데이트 주기를 실시간에서 5초 단위 폴링으로 전환하는 등의 폴백(Fallback) 전략을 준비합니다.
- **Performance Risks**:
    - **위험**: 리더보드 테이블의 데이터가 누적되면서 전체 순위 계산 쿼리가 느려질 수 있음.
    - **완화 전략**: PostgreSQL의 Materialized View를 사용하여 리더보드 데이터를 미리 집계해두거나, 주간/월간 단위로 테이블을 파티셔닝하여 조회 성능을 유지합니다.
- **Security Risks**:
    - **위험**: 클라이언트에서 API 요청을 조작하여 비정상적으로 높은 점수를 등록하는 부정행위 발생 가능성.
    - **완화 전략**: 모든 점수 등록 요청은 Vercel 서버리스 함수를 통해 서버 측에서 검증합니다. 라운드 소요 시간, 정답률 등을 종합적으로 판단하여 비정상적인 패턴을 탐지하고 해당 기록을 무효 처리합니다.
- **Integration Risks**:
    - **위험**: 서드파티 광고 SDK의 장애 또는 성능 저하가 전체 애플리케이션의 사용자 경험에 영향을 줄 수 있음.
    - **완화 전략**: 광고 컴포넌트를 `React.lazy`와 `Suspense`를 사용하여 비동기적으로 로드하고, 에러 경계(Error Boundary)를 설정하여 광고 로딩 실패가 앱 전체를 중단시키지 않도록 격리합니다.

### Project Delivery Risks
- **Timeline Risks**:
    - **위험**: 8주라는 MVP 개발 일정이 매우 촉박하여 기능 구현이 지연될 수 있음.
    - **완화 전략**: PRD의 기능 범위를 철저히 준수하고, MVP에 필수적이지 않은 기능(예: 주간 리포트 이메일 디자인 고도화)은 과감히 후순위로 조정합니다. 개발 초기부터 핵심 기능에 집중합니다.
- **Resource Risks**:
    - **위험**: 소규모 팀으로 진행되므로 특정 개발자에게 기술적 의존성이 집중될 수 있음.
    - **완화 전략**: 코드 리뷰와 페어 프로그래밍을 장려하여 지식을 공유하고, Supabase와 Vercel 등 관리형 서비스(Managed Service)를 적극 활용하여 인프라 관리 부담을 최소화합니다.
- **Quality Risks**:
    - **위험**: 빠른 개발 속도를 우선시하다가 코드 품질 저하 및 기술 부채가 누적될 수 있음.
    - **완화 전략**: 주요 비즈니스 로직에 대해서는 테스트 코드를 작성하고, CI 과정에 린트(Lint) 및 정적 분석 도구를 통합하여 최소한의 코드 품질 기준을 유지합니다.
- **Deployment Risks**:
    - **위험**: 배포 후 예상치 못한 버그나 성능 문제가 발생하여 사용자 경험을 해칠 수 있음.
    - **완화 전략**: Vercel의 Preview Deployments 기능을 활용하여 프로덕션 배포 전에 변경 사항을 충분히 검증합니다. 점진적 롤아웃(Progressive Rollout) 또는 기능 플래그(Feature Flag)를 도입하여 리스크를 관리합니다.