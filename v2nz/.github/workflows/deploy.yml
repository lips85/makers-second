name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # 배포 전 필수 검증
  pre-deployment-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # 스키마 동기화 상태 확인 (배포 전 필수)
    - name: 🔒 Pre-deployment schema validation
      run: npm run db:sync-check
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    # E2E 테스트 (배포 전 필수)
    - name: 🎭 Run E2E tests
      run: npm run test:e2e
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

    # 보안 취약점 검사
    - name: 🛡️ Security audit
      run: |
        npm audit --audit-level=moderate
        if ! npm audit --audit-level=high; then
          echo "❌ High severity vulnerabilities found"
          exit 1
        fi

  # Vercel 배포 (Vercel의 GitHub Integration 사용)
  deploy-vercel:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    
    steps:
    - name: 🚀 Deploy to Vercel
      run: |
        echo "Vercel deployment will be triggered automatically"
        echo "Monitor deployment status in Vercel Dashboard"

  # 배포 후 검증
  post-deployment-checks:
    runs-on: ubuntu-latest
    needs: deploy-vercel
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # 프로덕션 환경 헬스체크
    - name: 🏥 Production health check
      run: |
        PRODUCTION_URL="${{ secrets.PRODUCTION_URL || 'https://your-app.vercel.app' }}"
        
        # API 엔드포인트 체크
        if curl -f -s "$PRODUCTION_URL/api/health" > /dev/null; then
          echo "✅ Production API is healthy"
        else
          echo "❌ Production API health check failed"
          exit 1
        fi
        
        # 페이지 로딩 체크
        if curl -f -s "$PRODUCTION_URL" > /dev/null; then
          echo "✅ Production site is accessible"
        else
          echo "❌ Production site is not accessible"
          exit 1
        fi

    # 스모크 테스트
    - name: 💨 Smoke tests
      run: |
        echo "Running smoke tests against production..."
        # 여기에 중요한 기능들의 간단한 테스트 추가
        # 예: 로그인, 퀴즈 시작, 리더보드 조회 등

  # 슬랙 알림 (선택사항)
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-vercel, post-deployment-checks]
    if: always()
    
    steps:
    - name: 📢 Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Production Deployment ${{ job.status }}
          
          📋 Summary:
          - Schema validation: ${{ needs.pre-deployment-checks.result }}
          - Vercel deployment: ${{ needs.deploy-vercel.result }}  
          - Health checks: ${{ needs.post-deployment-checks.result }}
          
          🔗 View: ${{ secrets.PRODUCTION_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''
